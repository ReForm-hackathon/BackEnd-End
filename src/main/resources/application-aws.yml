server:
  address: 0.0.0.0
  port: 8080

spring:
  profiles:
    active: aws

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: http://3.38.86.136/oauth/callback/google
            authorization-grant-type: authorization_code
            scope:
              - email
              - profile

          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: http://3.38.86.136/oauth/callback/kakao
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - profile_image
              - profile_nickname
              - account_email
            client-name: Kakao

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: http://3.38.86.136/oauth/callback/naver
            authorization-grant-type: authorization_code
            scope:
              - profile_image
              - name
              - email
            client-name: Naver

        provider:
          kakao:
            authorization_uri: https://kauth.kakao.com/oauth/authorize
            token_uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user_name_attribute: id

          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response

    servlet:
      multipart:
        enabled: true
        file-size-threshold: 0B
        location: /resource/images
        max-file-size: 100MB
        max-request-size: 100MB

  ai:
    openai:
      api-key: ${SPRING_AI_OPENAI_API_KEY:${OPENAI_API_KEY:}}
      chat:
        options:
          model: gpt-4o-mini
          temperature: 0.2
    perplexity:
      api-key: ${SPRING_AI_PERPLEXITY_API_KEY:${PPLX_API_KEY:}}

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://reform-db.cpqwik40yvy0.ap-northeast-2.rds.amazonaws.com:3306/reform?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true

jwt:
  secret: ${JWT_SECRET}
  access:
    expiration: ${JWT_ACCESS_EXPIRATION:3600000}
    header: ${JWT_ACCESS_HEADER:Authorization}
  refresh:
    expiration: ${JWT_REFRESH_EXPIRATION:1209600000}
    header: ${JWT_REFRESH_HEADER:Authorization-refresh}

coolsms:
  apikey: ${COOLSMS_API_KEY}
  apisecret: ${COOLSMS_API_SECRET}
  fromnumber: ${COOLSMS_FROM}

aws:
  s3:
    access-key: ${AWS_S3_ACCESS_KEY}
    secret-key: ${AWS_S3_SECRET_KEY}
    bucket-name: ${AWS_S3_BUCKET}
  region: ap-northeast-2


